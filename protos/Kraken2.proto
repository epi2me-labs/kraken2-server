syntax = "proto3";

package kraken2proto;

// Interface exported by the server.
service Kraken2Service {
  rpc ServerReady(Kraken2ReadyRequest) returns (Kraken2ReadyResult) {}
  rpc GetSummary(Kraken2SummaryRequest) returns (Kraken2SummaryResults) {}
  rpc RemoteShutdown(Kraken2ShutdownRequest) returns (Kraken2ShutdownResult) {}
  rpc ClassifyStream(stream Kraken2SequenceRequestMulti) returns (stream Kraken2SequenceStreamResult) {}
}

// Request if server is ready (index loaded)
message Kraken2ReadyRequest {}

message Kraken2ReadyResult {
  bool ready = 1;
}

// Request historical classification summary
message Kraken2SummaryRequest {}

message Kraken2SummaryResults {
  string summary = 1;
}

// Remote shutdown request
message Kraken2ShutdownRequest {}

message Kraken2ShutdownResult {
  bool successful = 1;
}

// Classify sequences
message Kraken2SequenceRequest {
  enum SequenceFormat {
    FORMAT_AUTO_DETECT = 0;
    FORMAT_FASTA = 1;
    FORMAT_FASTQ = 2;
  }
  SequenceFormat format = 1;
  string header = 2;
  string id = 3;
  string seq = 4;
  string quals = 5;
  string str_representation = 6;
}

message Kraken2SequenceRequestMulti {
  repeated Kraken2SequenceRequest seqs = 1;
}

// - Classification result
message Kraken2SequenceResult {
  string id = 1;
  bool classified = 2;
  uint64 tax_id = 3;
  string name = 4;
  uint32 size = 5;
  string hitlist = 6;
}

message Kraken2SequenceResultMulti {
  repeated Kraken2SequenceResult classes = 1;
}

// - a stream of results
message Kraken2SequenceStreamResult {
  oneof result {
    string summary = 1;
    Kraken2SequenceResultMulti classifications = 2;
  }
}
